/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/admin'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AdminUserListImport } from './routes/admin/user-list'
import { Route as AdminProofsByUserImport } from './routes/admin/proofs-by-user'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminBanUserImport } from './routes/admin/ban-user'
import { Route as AuthenticatedUploadImport } from './routes/_authenticated/upload'
import { Route as AuthenticatedUploadTestIndexImport } from './routes/_authenticated/upload-test/index'
import { Route as AuthenticatedProfileIndexImport } from './routes/_authenticated/profile/index'
import { Route as AuthenticatedSendHashImport } from './routes/_authenticated/send.$hash'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUserListRoute = AdminUserListImport.update({
  id: '/user-list',
  path: '/user-list',
  getParentRoute: () => AdminRoute,
} as any)

const AdminProofsByUserRoute = AdminProofsByUserImport.update({
  id: '/proofs-by-user',
  path: '/proofs-by-user',
  getParentRoute: () => AdminRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

const AdminBanUserRoute = AdminBanUserImport.update({
  id: '/ban-user',
  path: '/ban-user',
  getParentRoute: () => AdminRoute,
} as any)

const AuthenticatedUploadRoute = AuthenticatedUploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUploadTestIndexRoute =
  AuthenticatedUploadTestIndexImport.update({
    id: '/upload-test/',
    path: '/upload-test/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedProfileIndexRoute = AuthenticatedProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSendHashRoute = AuthenticatedSendHashImport.update({
  id: '/send/$hash',
  path: '/send/$hash',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/upload': {
      id: '/_authenticated/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof AuthenticatedUploadImport
      parentRoute: typeof AuthenticatedImport
    }
    '/admin/ban-user': {
      id: '/admin/ban-user'
      path: '/ban-user'
      fullPath: '/admin/ban-user'
      preLoaderRoute: typeof AdminBanUserImport
      parentRoute: typeof AdminImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof AdminImport
    }
    '/admin/proofs-by-user': {
      id: '/admin/proofs-by-user'
      path: '/proofs-by-user'
      fullPath: '/admin/proofs-by-user'
      preLoaderRoute: typeof AdminProofsByUserImport
      parentRoute: typeof AdminImport
    }
    '/admin/user-list': {
      id: '/admin/user-list'
      path: '/user-list'
      fullPath: '/admin/user-list'
      preLoaderRoute: typeof AdminUserListImport
      parentRoute: typeof AdminImport
    }
    '/_authenticated/send/$hash': {
      id: '/_authenticated/send/$hash'
      path: '/send/$hash'
      fullPath: '/send/$hash'
      preLoaderRoute: typeof AuthenticatedSendHashImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/profile/': {
      id: '/_authenticated/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/upload-test/': {
      id: '/_authenticated/upload-test/'
      path: '/upload-test'
      fullPath: '/upload-test'
      preLoaderRoute: typeof AuthenticatedUploadTestIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedUploadRoute: typeof AuthenticatedUploadRoute
  AuthenticatedSendHashRoute: typeof AuthenticatedSendHashRoute
  AuthenticatedProfileIndexRoute: typeof AuthenticatedProfileIndexRoute
  AuthenticatedUploadTestIndexRoute: typeof AuthenticatedUploadTestIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedUploadRoute: AuthenticatedUploadRoute,
  AuthenticatedSendHashRoute: AuthenticatedSendHashRoute,
  AuthenticatedProfileIndexRoute: AuthenticatedProfileIndexRoute,
  AuthenticatedUploadTestIndexRoute: AuthenticatedUploadTestIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface AdminRouteChildren {
  AdminBanUserRoute: typeof AdminBanUserRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminProofsByUserRoute: typeof AdminProofsByUserRoute
  AdminUserListRoute: typeof AdminUserListRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBanUserRoute: AdminBanUserRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminProofsByUserRoute: AdminProofsByUserRoute,
  AdminUserListRoute: AdminUserListRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/upload': typeof AuthenticatedUploadRoute
  '/admin/ban-user': typeof AdminBanUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/proofs-by-user': typeof AdminProofsByUserRoute
  '/admin/user-list': typeof AdminUserListRoute
  '/send/$hash': typeof AuthenticatedSendHashRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
  '/upload-test': typeof AuthenticatedUploadTestIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/upload': typeof AuthenticatedUploadRoute
  '/admin/ban-user': typeof AdminBanUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/proofs-by-user': typeof AdminProofsByUserRoute
  '/admin/user-list': typeof AdminUserListRoute
  '/send/$hash': typeof AuthenticatedSendHashRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
  '/upload-test': typeof AuthenticatedUploadTestIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/_authenticated/upload': typeof AuthenticatedUploadRoute
  '/admin/ban-user': typeof AdminBanUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/proofs-by-user': typeof AdminProofsByUserRoute
  '/admin/user-list': typeof AdminUserListRoute
  '/_authenticated/send/$hash': typeof AuthenticatedSendHashRoute
  '/_authenticated/profile/': typeof AuthenticatedProfileIndexRoute
  '/_authenticated/upload-test/': typeof AuthenticatedUploadTestIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/admin'
    | '/upload'
    | '/admin/ban-user'
    | '/admin/dashboard'
    | '/admin/proofs-by-user'
    | '/admin/user-list'
    | '/send/$hash'
    | '/profile'
    | '/upload-test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/admin'
    | '/upload'
    | '/admin/ban-user'
    | '/admin/dashboard'
    | '/admin/proofs-by-user'
    | '/admin/user-list'
    | '/send/$hash'
    | '/profile'
    | '/upload-test'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/admin'
    | '/_authenticated/upload'
    | '/admin/ban-user'
    | '/admin/dashboard'
    | '/admin/proofs-by-user'
    | '/admin/user-list'
    | '/_authenticated/send/$hash'
    | '/_authenticated/profile/'
    | '/_authenticated/upload-test/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/admin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/upload",
        "/_authenticated/send/$hash",
        "/_authenticated/profile/",
        "/_authenticated/upload-test/"
      ]
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/ban-user",
        "/admin/dashboard",
        "/admin/proofs-by-user",
        "/admin/user-list"
      ]
    },
    "/_authenticated/upload": {
      "filePath": "_authenticated/upload.tsx",
      "parent": "/_authenticated"
    },
    "/admin/ban-user": {
      "filePath": "admin/ban-user.tsx",
      "parent": "/admin"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx",
      "parent": "/admin"
    },
    "/admin/proofs-by-user": {
      "filePath": "admin/proofs-by-user.tsx",
      "parent": "/admin"
    },
    "/admin/user-list": {
      "filePath": "admin/user-list.tsx",
      "parent": "/admin"
    },
    "/_authenticated/send/$hash": {
      "filePath": "_authenticated/send.$hash.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/profile/": {
      "filePath": "_authenticated/profile/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/upload-test/": {
      "filePath": "_authenticated/upload-test/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
